observe.svelte.ts:47 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._stickyActiveSection`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
warn @ client.js?v=be389e38:3150
await_reactivity_loss @ chunk-BSBVR7EO.js?v=be389e38:18
get @ chunk-JGN4BEWY.js?v=be389e38:3210
get _stickyActiveSection @ observe.svelte.ts:47
updateMostVisibleElement @ observe.svelte.ts:224
updateElementVisibility @ observe.svelte.ts:178
useIntersectionObserver.threshold @ observe.svelte.ts:148
 
get @ chunk-JGN4BEWY.js?v=be389e38:3215
get _stickyActiveSection @ observe.svelte.ts:38
updateMostVisibleElement @ observe.svelte.ts:190
updateElementVisibility @ observe.svelte.ts:156
useIntersectionObserver.threshold @ observe.svelte.ts:139
 [svelte] await_reactivity_lossDetected reactivity loss when reading `isNavLink`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ link.svelte:87
update_reaction @ chunk-JGN4BEWY.js?v=be389e38:3001
execute_derived @ chunk-JGN4BEWY.js?v=be389e38:1682
update_derived @ chunk-JGN4BEWY.js?v=be389e38:1699
is_dirty @ chunk-JGN4BEWY.js?v=be389e38:2924
is_dirty @ chunk-JGN4BEWY.js?v=be389e38:2920
#traverse_effect_tree @ chunk-JGN4BEWY.js?v=be389e38:2034
process @ chunk-JGN4BEWY.js?v=be389e38:1986
flush_effects @ chunk-JGN4BEWY.js?v=be389e38:2278
flush @ chunk-JGN4BEWY.js?v=be389e38:2093
(anonymous) @ chunk-JGN4BEWY.js?v=be389e38:2177
run_all @ chunk-JGN4BEWY.js?v=be389e38:73
run_micro_tasks @ chunk-JGN4BEWY.js?v=be389e38:605
(anonymous) @ chunk-JGN4BEWY.js?v=be389e38:611
 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._currentHash`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get _currentHash @ observe.svelte.ts:28
get currentHash @ observe.svelte.ts:92
(anonymous) @ link.svelte:90
 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._activeSection`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get _activeSection @ observe.svelte.ts:18
get activeSection @ observe.svelte.ts:88
(anonymous) @ link.svelte:92
 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._stickyActiveSection`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get stickyActiveSection @ observe.svelte.ts:96
(anonymous) @ link.svelte:93
 [svelte] await_reactivity_lossDetected reactivity loss when reading `sectionId`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ link.svelte:96
observe.svelte.ts:45 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._activeSection`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get _activeSection @ observe.svelte.ts:45
get activeSection @ observe.svelte.ts:95
(anonymous) @ link.svelte:89
observe.svelte.ts:45 TracedAtError
    at get_stack (chunk-JGN4BEWY.js?v=be389e38:921:15)
    at Module.get (chunk-JGN4BEWY.js?v=be389e38:3214:22)
    at get _activeSection (observe.svelte.ts:45:10)
    at get activeSection (observe.svelte.ts:95:15)
    at link.svelte:89:41
    at update_reaction (chunk-JGN4BEWY.js?v=be389e38:3001:18)
    at execute_derived (chunk-JGN4BEWY.js?v=be389e38:1682:15)
    at update_derived (chunk-JGN4BEWY.js?v=be389e38:1699:15)
    at is_dirty (chunk-JGN4BEWY.js?v=be389e38:2924:11)
    at is_dirty (chunk-JGN4BEWY.js?v=be389e38:2920:13)
get stickyActiveSection @ observe.svelte.ts:103
observe.svelte.ts:47 TracedAtError
    at get _stickyActiveSection (observe.svelte.ts:47:10)
    at get stickyActiveSection (observe.svelte.ts:103:15)
    at link.svelte:90:47
link.svelte:93 [svelte] await_reactivity_lossDetected reactivity loss when reading `sectionId`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
link.svelte:93 TracedAtError
    at link.svelte:93:37
link.svelte:84 [svelte] await_reactivity_lossDetected reactivity loss when reading `isNavLink`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ link.svelte:84
link.svelte:84 TracedAtError
    at link.svelte:84:38
observe.svelte.ts:46 [svelte] await_reactivity_lossDetected reactivity loss when reading `NavigationState._currentHash`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get _currentHash @ observe.svelte.ts:46
get currentHash @ observe.svelte.ts:99
(anonymous) @ link.svelte:88
observe.svelte.ts:46 TracedAtError
    at get _currentHash (observe.svelte.ts:46:10)
    at get currentHash (observe.svelte.ts:99:15)
    at link.svelte:88:39
component.svelte:97 [svelte] await_reactivity_lossDetected reactivity loss when reading `base`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
getComponentProps @ component.svelte:97
(anonymous) @ component.svelte:123
component.svelte:97 TracedAtError
    at getComponentProps (component.svelte:97:42)
    at component.svelte:123:11
    at #traverse_effect_tree (chunk-JGN4BEWY.js?v=be389e38:2034:22)
    at _Batch.process (chunk-JGN4BEWY.js?v=be389e38:1986:33)
component.svelte:99 [svelte] await_reactivity_lossDetected reactivity loss when reading `classes`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
getComponentProps @ component.svelte:99
component.svelte:99 TracedAtError
    at getComponentProps (component.svelte:99:8)
component.svelte:100 [svelte] await_reactivity_lossDetected reactivity loss when reading `observeInstances`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
getComponentProps @ component.svelte:100
component.svelte:100 TracedAtError
    at getComponentProps (component.svelte:100:25)
observe.svelte.ts:274 [svelte] await_reactivity_lossDetected reactivity loss when reading `ObserveClass.isIntersecting`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get isIntersecting @ observe.svelte.ts:274
observe.svelte.ts:274 TracedAtError
    at get isIntersecting (observe.svelte.ts:274:9)
    at getComponentProps (component.svelte:100:51)
section.svelte:111 [svelte] await_reactivity_lossDetected reactivity loss when reading `sectionId`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ section.svelte:111
(anonymous) @ chunk-AZNFMHQ7.js?v=be389e38:2224
update_effect @ chunk-JGN4BEWY.js?v=be389e38:3131
#traverse_effect_tree @ chunk-JGN4BEWY.js?v=be389e38:2036
section.svelte:111 TracedAtError
    at section.svelte:111:19
    at chunk-AZNFMHQ7.js?v=be389e38:2224:19
    at update_effect (chunk-JGN4BEWY.js?v=be389e38:3131:21)
    at #traverse_effect_tree (chunk-JGN4BEWY.js?v=be389e38:2036:13)
    at flush_effects (chunk-JGN4BEWY.js?v=be389e38:2278:13)
    at _Batch.flush (chunk-JGN4BEWY.js?v=be389e38:2093:7)
component.svelte:122 [svelte] await_reactivity_lossDetected reactivity loss when reading `undefined`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ component.svelte:122
props @ section.svelte:110
(anonymous) @ section.svelte:114
component.svelte:122 TracedAtError
    at component.svelte:122:21
    at props (section.svelte:110:29)
    at section.svelte:114:8
component.svelte:59 [svelte] await_reactivity_lossDetected reactivity loss when reading `elementRefs[0]`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
get @ chunk-JGN4BEWY.js?v=be389e38:3467
(anonymous) @ component.svelte:59
execute_effect_teardown @ chunk-JGN4BEWY.js?v=be389e38:2663
destroy_effect @ chunk-JGN4BEWY.js?v=be389e38:2718
destroy_effect_children @ chunk-JGN4BEWY.js?v=be389e38:2684
destroy_effect @ chunk-JGN4BEWY.js?v=be389e38:2709
(anonymous) @ chunk-AZNFMHQ7.js?v=be389e38:2241
component.svelte:59 TracedAtError
    at get (chunk-JGN4BEWY.js?v=be389e38:3214:22)
    at Object.get (chunk-JGN4BEWY.js?v=be389e38:3467:19)
    at component.svelte:59:20
    at execute_effect_teardown (chunk-JGN4BEWY.js?v=be389e38:2663:17)
    at destroy_effect (chunk-JGN4BEWY.js?v=be389e38:2718:3)
    at destroy_effect_children (chunk-JGN4BEWY.js?v=be389e38:2684:7)
    at destroy_effect (chunk-JGN4BEWY.js?v=be389e38:2709:3)
component.svelte:85 [svelte] await_reactivity_lossDetected reactivity loss when reading `elementRefs[0]`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ component.svelte:85
extract @ runed.js?v=be389e38:101
(anonymous) @ runed.js?v=be389e38:922
flush_queued_effects @ chunk-JGN4BEWY.js?v=be389e38:2304
process @ chunk-JGN4BEWY.js?v=be389e38:1998
component.svelte:85 TracedAtError
    at component.svelte:85:45
    at extract (runed.js?v=be389e38:101:20)
    at runed.js?v=be389e38:922:21
client.js?v=be389e38:3150 [svelte] await_reactivity_lossDetected reactivity loss when reading `targets`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
$effect @ runed.js?v=be389e38:929
flush_queued_effects @ chunk-JGN4BEWY.js?v=be389e38:2306
client.js?v=be389e38:3150 TracedAtError
    at $effect (runed.js?v=be389e38:929:12)
    at flush_queued_effects (chunk-JGN4BEWY.js?v=be389e38:2306:7)
    at _Batch.process (chunk-JGN4BEWY.js?v=be389e38:1998:7)
    at Array.<anonymous> (chunk-JGN4BEWY.js?v=be389e38:2177:17)
client.js?v=be389e38:3150 [svelte] await_reactivity_lossDetected reactivity loss when reading `isActive`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
    at $effect (runed.js?v=be389e38:929:34)
$effect @ runed.js?v=be389e38:931
    at $effect (runed.js?v=be389e38:931:24)
get @ chunk-JGN4BEWY.js?v=be389e38:3259
    at get (chunk-JGN4BEWY.js?v=be389e38:3259:7)
 [svelte] await_reactivity_lossDetected reactivity loss when reading `targets`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
 [svelte] await_reactivity_lossDetected reactivity loss when reading `elementRefs[0]`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
(anonymous) @ component.svelte:177
 [svelte] await_reactivity_lossDetected reactivity loss when reading `isActive`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
link.svelte:73 [svelte] await_reactivity_lossDetected reactivity loss when reading `isNavLink`. This happens when state is read in an async function after an earlier `await`https://svelte.dev/e/await_reactivity_loss
$effect @ link.svelte:73
link.svelte:73 TracedAtError
    at $effect (link.svelte:73:17)
